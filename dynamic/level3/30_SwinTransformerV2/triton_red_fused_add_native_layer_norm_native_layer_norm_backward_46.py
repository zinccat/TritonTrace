# From: 30_SwinTransformerV2

import triton
import triton.language as tl
from triton.compiler.compiler import AttrsDescriptor

from torch._inductor.runtime import triton_helpers, triton_heuristics
from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

@triton_heuristics.reduction(
    size_hints=[8192, 256],
    reduction_hint=ReductionHint.DEFAULT,
    filename=__file__,
    triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: 'i32', 7: 'i32', 8: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=82), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 7, 8), equal_to_1=())]},
    inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_red_fused_add_native_layer_norm_native_layer_norm_backward_46', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 2, 'backend_hash': '712B1D69F892A891D8FFA5075DCAB47CFF4E132D88BFC66744701CEAE226F127', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
)
@triton.jit
def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, out_ptr2, out_ptr3, ks0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
    rnumel = 192
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
    xmask = xindex < xnumel
    rbase = tl.arange(0, RBLOCK)[None, :]
    x0 = xindex % 784
    tl.device_assert(((0 <= tl.where((((x0 % (7*(triton_helpers.div_floor_integer(4*ks0,  libdevice.trunc(((16*ks0).to(tl.float64)) / 16.0000000000000).to(tl.int32))))) + (triton_helpers.remainder_integer((-3) + (7*(triton_helpers.div_floor_integer(4*ks0,  libdevice.trunc(((16*ks0).to(tl.float64)) / 16.0000000000000).to(tl.int32)))), 7*(triton_helpers.div_floor_integer(4*ks0,  libdevice.trunc(((16*ks0).to(tl.float64)) / 16.0000000000000).to(tl.int32)))))) % (7*(triton_helpers.div_floor_integer(4*ks0,  libdevice.trunc(((16*ks0).to(tl.float64)) / 16.0000000000000).to(tl.int32))))) < 0, 28 + (((x0 % (7*(triton_helpers.div_floor_integer(4*ks0,  libdevice.trunc(((16*ks0).to(tl.float64)) / 16.0000000000000).to(tl.int32))))) + (triton_helpers.remainder_integer((-3) + (7*(triton_helpers.div_floor_integer(4*ks0,  libdevice.trunc(((16*ks0).to(tl.float64)) / 16.0000000000000).to(tl.int32)))), 7*(triton_helpers.div_floor_integer(4*ks0,  libdevice.trunc(((16*ks0).to(tl.float64)) / 16.0000000000000).to(tl.int32)))))) % (7*(triton_helpers.div_floor_integer(4*ks0,  libdevice.trunc(((16*ks0).to(tl.float64)) / 16.0000000000000).to(tl.int32))))), ((x0 % (7*(triton_helpers.div_floor_integer(4*ks0,  libdevice.trunc(((16*ks0).to(tl.float64)) / 16.0000000000000).to(tl.int32))))) + (triton_helpers.remainder_integer((-3) + (7*(triton_helpers.div_floor_integer(4*ks0,  libdevice.trunc(((16*ks0).to(tl.float64)) / 16.0000000000000).to(tl.int32)))), 7*(triton_helpers.div_floor_integer(4*ks0,  libdevice.trunc(((16*ks0).to(tl.float64)) / 16.0000000000000).to(tl.int32)))))) % (7*(triton_helpers.div_floor_integer(4*ks0,  libdevice.trunc(((16*ks0).to(tl.float64)) / 16.0000000000000).to(tl.int32)))))) & (tl.where((((x0 % (7*(triton_helpers.div_floor_integer(4*ks0,  libdevice.trunc(((16*ks0).to(tl.float64)) / 16.0000000000000).to(tl.int32))))) + (triton_helpers.remainder_integer((-3) + (7*(triton_helpers.div_floor_integer(4*ks0,  libdevice.trunc(((16*ks0).to(tl.float64)) / 16.0000000000000).to(tl.int32)))), 7*(triton_helpers.div_floor_integer(4*ks0,  libdevice.trunc(((16*ks0).to(tl.float64)) / 16.0000000000000).to(tl.int32)))))) % (7*(triton_helpers.div_floor_integer(4*ks0,  libdevice.trunc(((16*ks0).to(tl.float64)) / 16.0000000000000).to(tl.int32))))) < 0, 28 + (((x0 % (7*(triton_helpers.div_floor_integer(4*ks0,  libdevice.trunc(((16*ks0).to(tl.float64)) / 16.0000000000000).to(tl.int32))))) + (triton_helpers.remainder_integer((-3) + (7*(triton_helpers.div_floor_integer(4*ks0,  libdevice.trunc(((16*ks0).to(tl.float64)) / 16.0000000000000).to(tl.int32)))), 7*(triton_helpers.div_floor_integer(4*ks0,  libdevice.trunc(((16*ks0).to(tl.float64)) / 16.0000000000000).to(tl.int32)))))) % (7*(triton_helpers.div_floor_integer(4*ks0,  libdevice.trunc(((16*ks0).to(tl.float64)) / 16.0000000000000).to(tl.int32))))), ((x0 % (7*(triton_helpers.div_floor_integer(4*ks0,  libdevice.trunc(((16*ks0).to(tl.float64)) / 16.0000000000000).to(tl.int32))))) + (triton_helpers.remainder_integer((-3) + (7*(triton_helpers.div_floor_integer(4*ks0,  libdevice.trunc(((16*ks0).to(tl.float64)) / 16.0000000000000).to(tl.int32)))), 7*(triton_helpers.div_floor_integer(4*ks0,  libdevice.trunc(((16*ks0).to(tl.float64)) / 16.0000000000000).to(tl.int32)))))) % (7*(triton_helpers.div_floor_integer(4*ks0,  libdevice.trunc(((16*ks0).to(tl.float64)) / 16.0000000000000).to(tl.int32))))) < 28)) | ~(xmask), "index out of bounds: 0 <= tl.where((((x0 % (7*(triton_helpers.div_floor_integer(4*ks0,  libdevice.trunc(((16*ks0).to(tl.float64)) / 16.0000000000000).to(tl.int32))))) + (triton_helpers.remainder_integer((-3) + (7*(triton_helpers.div_floor_integer(4*ks0,  libdevice.trunc(((16*ks0).to(tl.float64)) / 16.0000000000000).to(tl.int32)))), 7*(triton_helpers.div_floor_integer(4*ks0,  libdevice.trunc(((16*ks0).to(tl.float64)) / 16.0000000000000).to(tl.int32)))))) % (7*(triton_helpers.div_floor_integer(4*ks0,  libdevice.trunc(((16*ks0).to(tl.float64)) / 16.0000000000000).to(tl.int32))))) < 0, 28 + (((x0 % (7*(triton_helpers.div_floor_integer(4*ks0,  libdevice.trunc(((16*ks0).to(tl.float64)) / 16.0000000000000).to(tl.int32))))) + (triton_helpers.remainder_integer((-3) + (7*(triton_helpers.div_floor_integer(4*ks0,  libdevice.trunc(((16*ks0).to(tl.float64)) / 16.0000000000000).to(tl.int32)))), 7*(triton_helpers.div_floor_integer(4*ks0,  libdevice.trunc(((16*ks0).to(tl.float64)) / 16.0000000000000).to(tl.int32)))))) % (7*(triton_helpers.div_floor_integer(4*ks0,  libdevice.trunc(((16*ks0).to(tl.float64)) / 16.0000000000000).to(tl.int32))))), ((x0 % (7*(triton_helpers.div_floor_integer(4*ks0,  libdevice.trunc(((16*ks0).to(tl.float64)) / 16.0000000000000).to(tl.int32))))) + (triton_helpers.remainder_integer((-3) + (7*(triton_helpers.div_floor_integer(4*ks0,  libdevice.trunc(((16*ks0).to(tl.float64)) / 16.0000000000000).to(tl.int32)))), 7*(triton_helpers.div_floor_integer(4*ks0,  libdevice.trunc(((16*ks0).to(tl.float64)) / 16.0000000000000).to(tl.int32)))))) % (7*(triton_helpers.div_floor_integer(4*ks0,  libdevice.trunc(((16*ks0).to(tl.float64)) / 16.0000000000000).to(tl.int32))))) < 28")
    x1 = (xindex // 784)
    tmp3_mean = tl.zeros([XBLOCK, RBLOCK], tl.float32)
    tmp3_m2 = tl.zeros([XBLOCK, RBLOCK], tl.float32)
    tmp3_weight = tl.zeros([XBLOCK, RBLOCK], tl.float32)
    x3 = xindex
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r2 = rindex
        tmp1 = tl.load(in_ptr0 + (r2 + ((triton_helpers.div_floor_integer(192*ks0,  libdevice.trunc(((16*ks0).to(tl.float64)) / 16.0000000000000).to(tl.int32)))*((tl.where((((x0 % (7*(triton_helpers.div_floor_integer(4*ks0,  libdevice.trunc(((16*ks0).to(tl.float64)) / 16.0000000000000).to(tl.int32))))) + (triton_helpers.remainder_integer((-3) + (7*(triton_helpers.div_floor_integer(4*ks0,  libdevice.trunc(((16*ks0).to(tl.float64)) / 16.0000000000000).to(tl.int32)))), 7*(triton_helpers.div_floor_integer(4*ks0,  libdevice.trunc(((16*ks0).to(tl.float64)) / 16.0000000000000).to(tl.int32)))))) % (7*(triton_helpers.div_floor_integer(4*ks0,  libdevice.trunc(((16*ks0).to(tl.float64)) / 16.0000000000000).to(tl.int32))))) < 0, 28 + (((x0 % (7*(triton_helpers.div_floor_integer(4*ks0,  libdevice.trunc(((16*ks0).to(tl.float64)) / 16.0000000000000).to(tl.int32))))) + (triton_helpers.remainder_integer((-3) + (7*(triton_helpers.div_floor_integer(4*ks0,  libdevice.trunc(((16*ks0).to(tl.float64)) / 16.0000000000000).to(tl.int32)))), 7*(triton_helpers.div_floor_integer(4*ks0,  libdevice.trunc(((16*ks0).to(tl.float64)) / 16.0000000000000).to(tl.int32)))))) % (7*(triton_helpers.div_floor_integer(4*ks0,  libdevice.trunc(((16*ks0).to(tl.float64)) / 16.0000000000000).to(tl.int32))))), ((x0 % (7*(triton_helpers.div_floor_integer(4*ks0,  libdevice.trunc(((16*ks0).to(tl.float64)) / 16.0000000000000).to(tl.int32))))) + (triton_helpers.remainder_integer((-3) + (7*(triton_helpers.div_floor_integer(4*ks0,  libdevice.trunc(((16*ks0).to(tl.float64)) / 16.0000000000000).to(tl.int32)))), 7*(triton_helpers.div_floor_integer(4*ks0,  libdevice.trunc(((16*ks0).to(tl.float64)) / 16.0000000000000).to(tl.int32)))))) % (7*(triton_helpers.div_floor_integer(4*ks0,  libdevice.trunc(((16*ks0).to(tl.float64)) / 16.0000000000000).to(tl.int32)))))) % 7)) + (7*(triton_helpers.div_floor_integer(192*ks0,  libdevice.trunc(((16*ks0).to(tl.float64)) / 16.0000000000000).to(tl.int32)))*((tl.where(((25 + ((x0 // (7*(triton_helpers.div_floor_integer(4*ks0,  libdevice.trunc(((16*ks0).to(tl.float64)) / 16.0000000000000).to(tl.int32))))) % 28)) % 28) < 0, 28 + ((25 + ((x0 // (7*(triton_helpers.div_floor_integer(4*ks0,  libdevice.trunc(((16*ks0).to(tl.float64)) / 16.0000000000000).to(tl.int32))))) % 28)) % 28), (25 + ((x0 // (7*(triton_helpers.div_floor_integer(4*ks0,  libdevice.trunc(((16*ks0).to(tl.float64)) / 16.0000000000000).to(tl.int32))))) % 28)) % 28)) % 7)) + (49*(triton_helpers.div_floor_integer(192*ks0,  libdevice.trunc(((16*ks0).to(tl.float64)) / 16.0000000000000).to(tl.int32)))*(((tl.where((((x0 % (7*(triton_helpers.div_floor_integer(4*ks0,  libdevice.trunc(((16*ks0).to(tl.float64)) / 16.0000000000000).to(tl.int32))))) + (triton_helpers.remainder_integer((-3) + (7*(triton_helpers.div_floor_integer(4*ks0,  libdevice.trunc(((16*ks0).to(tl.float64)) / 16.0000000000000).to(tl.int32)))), 7*(triton_helpers.div_floor_integer(4*ks0,  libdevice.trunc(((16*ks0).to(tl.float64)) / 16.0000000000000).to(tl.int32)))))) % (7*(triton_helpers.div_floor_integer(4*ks0,  libdevice.trunc(((16*ks0).to(tl.float64)) / 16.0000000000000).to(tl.int32))))) < 0, 28 + (((x0 % (7*(triton_helpers.div_floor_integer(4*ks0,  libdevice.trunc(((16*ks0).to(tl.float64)) / 16.0000000000000).to(tl.int32))))) + (triton_helpers.remainder_integer((-3) + (7*(triton_helpers.div_floor_integer(4*ks0,  libdevice.trunc(((16*ks0).to(tl.float64)) / 16.0000000000000).to(tl.int32)))), 7*(triton_helpers.div_floor_integer(4*ks0,  libdevice.trunc(((16*ks0).to(tl.float64)) / 16.0000000000000).to(tl.int32)))))) % (7*(triton_helpers.div_floor_integer(4*ks0,  libdevice.trunc(((16*ks0).to(tl.float64)) / 16.0000000000000).to(tl.int32))))), ((x0 % (7*(triton_helpers.div_floor_integer(4*ks0,  libdevice.trunc(((16*ks0).to(tl.float64)) / 16.0000000000000).to(tl.int32))))) + (triton_helpers.remainder_integer((-3) + (7*(triton_helpers.div_floor_integer(4*ks0,  libdevice.trunc(((16*ks0).to(tl.float64)) / 16.0000000000000).to(tl.int32)))), 7*(triton_helpers.div_floor_integer(4*ks0,  libdevice.trunc(((16*ks0).to(tl.float64)) / 16.0000000000000).to(tl.int32)))))) % (7*(triton_helpers.div_floor_integer(4*ks0,  libdevice.trunc(((16*ks0).to(tl.float64)) / 16.0000000000000).to(tl.int32)))))) // 7) % 4)) + (196*(triton_helpers.div_floor_integer(192*ks0,  libdevice.trunc(((16*ks0).to(tl.float64)) / 16.0000000000000).to(tl.int32)))*(((tl.where(((25 + ((x0 // (7*(triton_helpers.div_floor_integer(4*ks0,  libdevice.trunc(((16*ks0).to(tl.float64)) / 16.0000000000000).to(tl.int32))))) % 28)) % 28) < 0, 28 + ((25 + ((x0 // (7*(triton_helpers.div_floor_integer(4*ks0,  libdevice.trunc(((16*ks0).to(tl.float64)) / 16.0000000000000).to(tl.int32))))) % 28)) % 28), (25 + ((x0 // (7*(triton_helpers.div_floor_integer(4*ks0,  libdevice.trunc(((16*ks0).to(tl.float64)) / 16.0000000000000).to(tl.int32))))) % 28)) % 28)) // 7) % 4)) + (784*x1*(triton_helpers.div_floor_integer(192*ks0,  libdevice.trunc(((16*ks0).to(tl.float64)) / 16.0000000000000).to(tl.int32))))), rmask & xmask, eviction_policy='evict_last', other=0.0)
        tmp2 = tl.broadcast_to(tmp1, [XBLOCK, RBLOCK])
        tmp3_mean_next, tmp3_m2_next, tmp3_weight_next = triton_helpers.welford_reduce(
            tmp2, tmp3_mean, tmp3_m2, tmp3_weight, roffset == 0
        )
        tmp3_mean = tl.where(rmask & xmask, tmp3_mean_next, tmp3_mean)
        tmp3_m2 = tl.where(rmask & xmask, tmp3_m2_next, tmp3_m2)
        tmp3_weight = tl.where(rmask & xmask, tmp3_weight_next, tmp3_weight)
    tmp3_tmp, tmp4_tmp, tmp5_tmp = triton_helpers.welford(
        tmp3_mean, tmp3_m2, tmp3_weight, 1
    )
    tmp3 = tmp3_tmp[:, None]
    tmp4 = tmp4_tmp[:, None]
    tmp5 = tmp5_tmp[:, None]
    tl.device_assert(((0 <= tl.where((((x0 % (7*(triton_helpers.div_floor_integer(4*ks0,  libdevice.trunc(((16*ks0).to(tl.float64)) / 16.0000000000000).to(tl.int32))))) + (triton_helpers.remainder_integer((-3) + (7*(triton_helpers.div_floor_integer(4*ks0,  libdevice.trunc(((16*ks0).to(tl.float64)) / 16.0000000000000).to(tl.int32)))), 7*(triton_helpers.div_floor_integer(4*ks0,  libdevice.trunc(((16*ks0).to(tl.float64)) / 16.0000000000000).to(tl.int32)))))) % (7*(triton_helpers.div_floor_integer(4*ks0,  libdevice.trunc(((16*ks0).to(tl.float64)) / 16.0000000000000).to(tl.int32))))) < 0, 28 + (((x0 % (7*(triton_helpers.div_floor_integer(4*ks0,  libdevice.trunc(((16*ks0).to(tl.float64)) / 16.0000000000000).to(tl.int32))))) + (triton_helpers.remainder_integer((-3) + (7*(triton_helpers.div_floor_integer(4*ks0,  libdevice.trunc(((16*ks0).to(tl.float64)) / 16.0000000000000).to(tl.int32)))), 7*(triton_helpers.div_floor_integer(4*ks0,  libdevice.trunc(((16*ks0).to(tl.float64)) / 16.0000000000000).to(tl.int32)))))) % (7*(triton_helpers.div_floor_integer(4*ks0,  libdevice.trunc(((16*ks0).to(tl.float64)) / 16.0000000000000).to(tl.int32))))), ((x0 % (7*(triton_helpers.div_floor_integer(4*ks0,  libdevice.trunc(((16*ks0).to(tl.float64)) / 16.0000000000000).to(tl.int32))))) + (triton_helpers.remainder_integer((-3) + (7*(triton_helpers.div_floor_integer(4*ks0,  libdevice.trunc(((16*ks0).to(tl.float64)) / 16.0000000000000).to(tl.int32)))), 7*(triton_helpers.div_floor_integer(4*ks0,  libdevice.trunc(((16*ks0).to(tl.float64)) / 16.0000000000000).to(tl.int32)))))) % (7*(triton_helpers.div_floor_integer(4*ks0,  libdevice.trunc(((16*ks0).to(tl.float64)) / 16.0000000000000).to(tl.int32)))))) & (tl.where((((x0 % (7*(triton_helpers.div_floor_integer(4*ks0,  libdevice.trunc(((16*ks0).to(tl.float64)) / 16.0000000000000).to(tl.int32))))) + (triton_helpers.remainder_integer((-3) + (7*(triton_helpers.div_floor_integer(4*ks0,  libdevice.trunc(((16*ks0).to(tl.float64)) / 16.0000000000000).to(tl.int32)))), 7*(triton_helpers.div_floor_integer(4*ks0,  libdevice.trunc(((16*ks0).to(tl.float64)) / 16.0000000000000).to(tl.int32)))))) % (7*(triton_helpers.div_floor_integer(4*ks0,  libdevice.trunc(((16*ks0).to(tl.float64)) / 16.0000000000000).to(tl.int32))))) < 0, 28 + (((x0 % (7*(triton_helpers.div_floor_integer(4*ks0,  libdevice.trunc(((16*ks0).to(tl.float64)) / 16.0000000000000).to(tl.int32))))) + (triton_helpers.remainder_integer((-3) + (7*(triton_helpers.div_floor_integer(4*ks0,  libdevice.trunc(((16*ks0).to(tl.float64)) / 16.0000000000000).to(tl.int32)))), 7*(triton_helpers.div_floor_integer(4*ks0,  libdevice.trunc(((16*ks0).to(tl.float64)) / 16.0000000000000).to(tl.int32)))))) % (7*(triton_helpers.div_floor_integer(4*ks0,  libdevice.trunc(((16*ks0).to(tl.float64)) / 16.0000000000000).to(tl.int32))))), ((x0 % (7*(triton_helpers.div_floor_integer(4*ks0,  libdevice.trunc(((16*ks0).to(tl.float64)) / 16.0000000000000).to(tl.int32))))) + (triton_helpers.remainder_integer((-3) + (7*(triton_helpers.div_floor_integer(4*ks0,  libdevice.trunc(((16*ks0).to(tl.float64)) / 16.0000000000000).to(tl.int32)))), 7*(triton_helpers.div_floor_integer(4*ks0,  libdevice.trunc(((16*ks0).to(tl.float64)) / 16.0000000000000).to(tl.int32)))))) % (7*(triton_helpers.div_floor_integer(4*ks0,  libdevice.trunc(((16*ks0).to(tl.float64)) / 16.0000000000000).to(tl.int32))))) < 28)) | ~(xmask), "index out of bounds: 0 <= tl.where((((x0 % (7*(triton_helpers.div_floor_integer(4*ks0,  libdevice.trunc(((16*ks0).to(tl.float64)) / 16.0000000000000).to(tl.int32))))) + (triton_helpers.remainder_integer((-3) + (7*(triton_helpers.div_floor_integer(4*ks0,  libdevice.trunc(((16*ks0).to(tl.float64)) / 16.0000000000000).to(tl.int32)))), 7*(triton_helpers.div_floor_integer(4*ks0,  libdevice.trunc(((16*ks0).to(tl.float64)) / 16.0000000000000).to(tl.int32)))))) % (7*(triton_helpers.div_floor_integer(4*ks0,  libdevice.trunc(((16*ks0).to(tl.float64)) / 16.0000000000000).to(tl.int32))))) < 0, 28 + (((x0 % (7*(triton_helpers.div_floor_integer(4*ks0,  libdevice.trunc(((16*ks0).to(tl.float64)) / 16.0000000000000).to(tl.int32))))) + (triton_helpers.remainder_integer((-3) + (7*(triton_helpers.div_floor_integer(4*ks0,  libdevice.trunc(((16*ks0).to(tl.float64)) / 16.0000000000000).to(tl.int32)))), 7*(triton_helpers.div_floor_integer(4*ks0,  libdevice.trunc(((16*ks0).to(tl.float64)) / 16.0000000000000).to(tl.int32)))))) % (7*(triton_helpers.div_floor_integer(4*ks0,  libdevice.trunc(((16*ks0).to(tl.float64)) / 16.0000000000000).to(tl.int32))))), ((x0 % (7*(triton_helpers.div_floor_integer(4*ks0,  libdevice.trunc(((16*ks0).to(tl.float64)) / 16.0000000000000).to(tl.int32))))) + (triton_helpers.remainder_integer((-3) + (7*(triton_helpers.div_floor_integer(4*ks0,  libdevice.trunc(((16*ks0).to(tl.float64)) / 16.0000000000000).to(tl.int32)))), 7*(triton_helpers.div_floor_integer(4*ks0,  libdevice.trunc(((16*ks0).to(tl.float64)) / 16.0000000000000).to(tl.int32)))))) % (7*(triton_helpers.div_floor_integer(4*ks0,  libdevice.trunc(((16*ks0).to(tl.float64)) / 16.0000000000000).to(tl.int32))))) < 28")
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r2 = rindex
        tmp7 = tl.load(in_ptr0 + (r2 + ((triton_helpers.div_floor_integer(192*ks0,  libdevice.trunc(((16*ks0).to(tl.float64)) / 16.0000000000000).to(tl.int32)))*((tl.where((((x0 % (7*(triton_helpers.div_floor_integer(4*ks0,  libdevice.trunc(((16*ks0).to(tl.float64)) / 16.0000000000000).to(tl.int32))))) + (triton_helpers.remainder_integer((-3) + (7*(triton_helpers.div_floor_integer(4*ks0,  libdevice.trunc(((16*ks0).to(tl.float64)) / 16.0000000000000).to(tl.int32)))), 7*(triton_helpers.div_floor_integer(4*ks0,  libdevice.trunc(((16*ks0).to(tl.float64)) / 16.0000000000000).to(tl.int32)))))) % (7*(triton_helpers.div_floor_integer(4*ks0,  libdevice.trunc(((16*ks0).to(tl.float64)) / 16.0000000000000).to(tl.int32))))) < 0, 28 + (((x0 % (7*(triton_helpers.div_floor_integer(4*ks0,  libdevice.trunc(((16*ks0).to(tl.float64)) / 16.0000000000000).to(tl.int32))))) + (triton_helpers.remainder_integer((-3) + (7*(triton_helpers.div_floor_integer(4*ks0,  libdevice.trunc(((16*ks0).to(tl.float64)) / 16.0000000000000).to(tl.int32)))), 7*(triton_helpers.div_floor_integer(4*ks0,  libdevice.trunc(((16*ks0).to(tl.float64)) / 16.0000000000000).to(tl.int32)))))) % (7*(triton_helpers.div_floor_integer(4*ks0,  libdevice.trunc(((16*ks0).to(tl.float64)) / 16.0000000000000).to(tl.int32))))), ((x0 % (7*(triton_helpers.div_floor_integer(4*ks0,  libdevice.trunc(((16*ks0).to(tl.float64)) / 16.0000000000000).to(tl.int32))))) + (triton_helpers.remainder_integer((-3) + (7*(triton_helpers.div_floor_integer(4*ks0,  libdevice.trunc(((16*ks0).to(tl.float64)) / 16.0000000000000).to(tl.int32)))), 7*(triton_helpers.div_floor_integer(4*ks0,  libdevice.trunc(((16*ks0).to(tl.float64)) / 16.0000000000000).to(tl.int32)))))) % (7*(triton_helpers.div_floor_integer(4*ks0,  libdevice.trunc(((16*ks0).to(tl.float64)) / 16.0000000000000).to(tl.int32)))))) % 7)) + (7*(triton_helpers.div_floor_integer(192*ks0,  libdevice.trunc(((16*ks0).to(tl.float64)) / 16.0000000000000).to(tl.int32)))*((tl.where(((25 + ((x0 // (7*(triton_helpers.div_floor_integer(4*ks0,  libdevice.trunc(((16*ks0).to(tl.float64)) / 16.0000000000000).to(tl.int32))))) % 28)) % 28) < 0, 28 + ((25 + ((x0 // (7*(triton_helpers.div_floor_integer(4*ks0,  libdevice.trunc(((16*ks0).to(tl.float64)) / 16.0000000000000).to(tl.int32))))) % 28)) % 28), (25 + ((x0 // (7*(triton_helpers.div_floor_integer(4*ks0,  libdevice.trunc(((16*ks0).to(tl.float64)) / 16.0000000000000).to(tl.int32))))) % 28)) % 28)) % 7)) + (49*(triton_helpers.div_floor_integer(192*ks0,  libdevice.trunc(((16*ks0).to(tl.float64)) / 16.0000000000000).to(tl.int32)))*(((tl.where((((x0 % (7*(triton_helpers.div_floor_integer(4*ks0,  libdevice.trunc(((16*ks0).to(tl.float64)) / 16.0000000000000).to(tl.int32))))) + (triton_helpers.remainder_integer((-3) + (7*(triton_helpers.div_floor_integer(4*ks0,  libdevice.trunc(((16*ks0).to(tl.float64)) / 16.0000000000000).to(tl.int32)))), 7*(triton_helpers.div_floor_integer(4*ks0,  libdevice.trunc(((16*ks0).to(tl.float64)) / 16.0000000000000).to(tl.int32)))))) % (7*(triton_helpers.div_floor_integer(4*ks0,  libdevice.trunc(((16*ks0).to(tl.float64)) / 16.0000000000000).to(tl.int32))))) < 0, 28 + (((x0 % (7*(triton_helpers.div_floor_integer(4*ks0,  libdevice.trunc(((16*ks0).to(tl.float64)) / 16.0000000000000).to(tl.int32))))) + (triton_helpers.remainder_integer((-3) + (7*(triton_helpers.div_floor_integer(4*ks0,  libdevice.trunc(((16*ks0).to(tl.float64)) / 16.0000000000000).to(tl.int32)))), 7*(triton_helpers.div_floor_integer(4*ks0,  libdevice.trunc(((16*ks0).to(tl.float64)) / 16.0000000000000).to(tl.int32)))))) % (7*(triton_helpers.div_floor_integer(4*ks0,  libdevice.trunc(((16*ks0).to(tl.float64)) / 16.0000000000000).to(tl.int32))))), ((x0 % (7*(triton_helpers.div_floor_integer(4*ks0,  libdevice.trunc(((16*ks0).to(tl.float64)) / 16.0000000000000).to(tl.int32))))) + (triton_helpers.remainder_integer((-3) + (7*(triton_helpers.div_floor_integer(4*ks0,  libdevice.trunc(((16*ks0).to(tl.float64)) / 16.0000000000000).to(tl.int32)))), 7*(triton_helpers.div_floor_integer(4*ks0,  libdevice.trunc(((16*ks0).to(tl.float64)) / 16.0000000000000).to(tl.int32)))))) % (7*(triton_helpers.div_floor_integer(4*ks0,  libdevice.trunc(((16*ks0).to(tl.float64)) / 16.0000000000000).to(tl.int32)))))) // 7) % 4)) + (196*(triton_helpers.div_floor_integer(192*ks0,  libdevice.trunc(((16*ks0).to(tl.float64)) / 16.0000000000000).to(tl.int32)))*(((tl.where(((25 + ((x0 // (7*(triton_helpers.div_floor_integer(4*ks0,  libdevice.trunc(((16*ks0).to(tl.float64)) / 16.0000000000000).to(tl.int32))))) % 28)) % 28) < 0, 28 + ((25 + ((x0 // (7*(triton_helpers.div_floor_integer(4*ks0,  libdevice.trunc(((16*ks0).to(tl.float64)) / 16.0000000000000).to(tl.int32))))) % 28)) % 28), (25 + ((x0 // (7*(triton_helpers.div_floor_integer(4*ks0,  libdevice.trunc(((16*ks0).to(tl.float64)) / 16.0000000000000).to(tl.int32))))) % 28)) % 28)) // 7) % 4)) + (784*x1*(triton_helpers.div_floor_integer(192*ks0,  libdevice.trunc(((16*ks0).to(tl.float64)) / 16.0000000000000).to(tl.int32))))), rmask & xmask, eviction_policy='evict_first', other=0.0)
        tmp15 = tl.load(in_out_ptr0 + (r2 + (192*x3)), rmask & xmask, eviction_policy='evict_first', other=0.0)
        tmp16 = tl.load(in_ptr1 + (r2), rmask, eviction_policy='evict_last', other=0.0)
        tmp18 = tl.load(in_ptr2 + (r2), rmask, eviction_policy='evict_last', other=0.0)
        tmp8 = tmp7 - tmp3
        tmp9 = 192.0
        tmp10 = tmp4 / tmp9
        tmp11 = 1e-05
        tmp12 = tmp10 + tmp11
        tmp13 = libdevice.rsqrt(tmp12)
        tmp14 = tmp8 * tmp13
        tmp17 = tmp14 * tmp16
        tmp19 = tmp17 + tmp18
        tmp20 = tmp15 + tmp19
        tl.store(out_ptr2 + (r2 + (192*x0) + (37632*x1*(triton_helpers.div_floor_integer(4*ks0,  libdevice.trunc(((16*ks0).to(tl.float64)) / 16.0000000000000).to(tl.int32))))), tmp14, rmask & xmask)
        tl.store(in_out_ptr0 + (r2 + (192*x3)), tmp20, rmask & xmask)
    tmp21 = 192.0
    tmp22 = tmp4 / tmp21
    tmp23 = 1e-05
    tmp24 = tmp22 + tmp23
    tmp25 = libdevice.rsqrt(tmp24)
    tmp26 = 0.005208333333333333
    tmp27 = tmp25 * tmp26
    tl.store(out_ptr3 + (x0 + (196*x1*(triton_helpers.div_floor_integer(4*ks0,  libdevice.trunc(((16*ks0).to(tl.float64)) / 16.0000000000000).to(tl.int32))))), tmp27, xmask)
